package validations

import (
	"testing"
	"time"

	"github.com/jonh-dev/partus_users/api"
	"github.com/jonh-dev/partus_users/internal/tests"
	"google.golang.org/protobuf/types/known/timestamppb"
)

func TestAccountInfoValidation(t *testing.T) {
	testsCases := []tests.UserTest{
		{
			Name: "Invalid username (empty)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.lowercase@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o nome de usuário deve começar e terminar com um caractere alfanumérico, pode conter letras, números, pontos, hifens e sublinhados, não pode conter caracteres especiais consecutivos, e deve ter entre 3 e 20 caracteres",
		},
		{
			Name: "Invalid username (special characters)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.lowercase@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joão@",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o nome de usuário deve começar e terminar com um caractere alfanumérico, pode conter letras, números, pontos, hifens e sublinhados, não pode conter caracteres especiais consecutivos, e deve ter entre 3 e 20 caracteres",
		},
		{
			Name: "Invalid username (less than 3 characters)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.lowercase@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "jo",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o nome de usuário deve começar e terminar com um caractere alfanumérico, pode conter letras, números, pontos, hifens e sublinhados, não pode conter caracteres especiais consecutivos, e deve ter entre 3 e 20 caracteres",
		},
		{
			Name: "Invalid password (no special characters)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.no.special.characters@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao123",
					Password:              "ValidPassword123",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: a senha deve ter entre 8 e 64 caracteres, conter pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial",
		},
		{
			Name: "Invalid password (no uppercase letters)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.no.uppercase.letters@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao123",
					Password:              "validpassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: a senha deve ter entre 8 e 64 caracteres, conter pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial",
		},
		{
			Name: "Invalid password (no lowercase letters)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.no.lowercase.letters@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao123",
					Password:              "VALIDPASSWORD123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: a senha deve ter entre 8 e 64 caracteres, conter pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial",
		},
		{
			Name: "Invalid password (no numbers)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.no.numbers@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao123",
					Password:              "ValidPassword!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: a senha deve ter entre 8 e 64 caracteres, conter pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial",
		},
		{
			Name: "Invalid password (less than 8 characters)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.less.than.eight.characters@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao123",
					Password:              "Valid1!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: a senha deve ter entre 8 e 64 caracteres, conter pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial",
		},
		{
			Name: "Invalid password (more than 64 characters)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.more.than.sixth.four.characters@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao123",
					Password:              "ValiddPassword1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: a senha deve ter entre 8 e 64 caracteres, conter pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial",
		},
		{
			Name: "Invalid account status (invalid value)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.invalid.value@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao123",
					Password:              "ValidPassword123!",
					AccountStatus:         4,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             nil,
					FailedLoginAttempts:   0,
					LastFailedLogin:       nil,
					LastFailedLoginReason: "",
					AccountLockedUntil:    nil,
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o status da conta deve ser ACTIVE, INACTIVE, PENDING ou SUSPENDED",
		},
		{
			Name: "Invalid account status (negative value)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.negative.value@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao123",
					Password:              "ValidPassword123!",
					AccountStatus:         -1,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             nil,
					FailedLoginAttempts:   0,
					LastFailedLogin:       nil,
					LastFailedLoginReason: "",
					AccountLockedUntil:    nil,
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o status da conta deve ser ACTIVE, INACTIVE, PENDING ou SUSPENDED",
		},
		{
			Name: "Invalid account status (greater than 3)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.greater.than.three@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao123",
					Password:              "ValidPassword123!",
					AccountStatus:         5,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             nil,
					FailedLoginAttempts:   0,
					LastFailedLogin:       nil,
					LastFailedLoginReason: "",
					AccountLockedUntil:    nil,
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o status da conta deve ser ACTIVE, INACTIVE, PENDING ou SUSPENDED",
		},
		{
			Name: "Invalid status reason (empty string when account status is not ACTIVE)",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Santos",
					Email:     "joao.is.empty@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.Local)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao123",
					Password:              "ValidPassword123!",
					AccountStatus:         2,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             nil,
					FailedLoginAttempts:   0,
					LastFailedLogin:       nil,
					LastFailedLoginReason: "",
					AccountLockedUntil:    nil,
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: a razão do status deve ser uma string não vazia se o status da conta não for ACTIVE",
		},
	}

	for _, tt := range testsCases {
		tt.RunTest(t)
	}
}
