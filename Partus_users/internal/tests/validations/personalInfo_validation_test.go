package validations

import (
	"testing"
	"time"

	"github.com/jonh-dev/partus_users/api"
	"github.com/jonh-dev/partus_users/internal/tests"
	"google.golang.org/protobuf/types/known/timestamppb"
)

func TestPersonalInfoValidation(t *testing.T) {
	testsCases := []tests.UserTest{
		{
			Name: "Invalid First Name - Lowercase",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "joão",
					LastName:  "Silva",
					Email:     "joao.lowercase@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o primeiro nome deve começar com uma letra maiúscula, conter apenas uma palavra e ter no máximo 20 caracteres",
		},
		{
			Name: "Invalid First Name - Multiple Words",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João Carlos",
					LastName:  "Silva",
					Email:     "joao.carlos@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o primeiro nome deve começar com uma letra maiúscula, conter apenas uma palavra e ter no máximo 20 caracteres",
		},
		{
			Name: "Invalid First Name - Contains Numbers",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João1",
					LastName:  "Silva",
					Email:     "joao.numbers@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o primeiro nome deve começar com uma letra maiúscula, conter apenas uma palavra e ter no máximo 20 caracteres",
		},
		{
			Name: "Invalid First Name - Too Long",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "Joãooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo",
					LastName:  "Silva",
					Email:     "joao.long@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o primeiro nome deve começar com uma letra maiúscula, conter apenas uma palavra e ter no máximo 20 caracteres",
		},
		{
			Name: "Invalid Last Name - Lowercase",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "silva",
					Email:     "joao.lowercase@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o sobrenome deve começar com uma letra maiúscula em cada palavra e ter no máximo 50 caracteres",
		},
		{
			Name: "Invalid Last Name - Contains Numbers",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva1",
					Email:     "joao.numbers@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o sobrenome deve começar com uma letra maiúscula em cada palavra e ter no máximo 50 caracteres",
		},
		{
			Name: "Invalid Last Name - Too Long",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silvaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
					Email:     "joao.long@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o sobrenome deve começar com uma letra maiúscula em cada palavra e ter no máximo 50 caracteres",
		},
		{
			Name: "Invalid Email - Missing @",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.missingatexample.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o e-mail deve ser um endereço de e-mail válido",
		},
		{
			Name: "Invalid Email - Missing Domain",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.missingdomain@",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o e-mail deve ser um endereço de e-mail válido",
		},
		{
			Name: "Invalid Email - Missing Username",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o e-mail deve ser um endereço de e-mail válido",
		},
		{
			Name: "Invalid Email - Missing Username and Domain",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "@",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o e-mail deve ser um endereço de e-mail válido",
		},
		{
			Name: "Invalid Birth Date - Future Date",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.future@example.com",
					BirthDate: timestamppb.New(time.Now().AddDate(0, 0, 1)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: a data de nascimento deve estar no passado, o usuário deve ter pelo menos 13 anos e o ano deve ser entre 1900 e o ano atual",
		},
		{
			Name: "Invalid Birth Date - User Too Young",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.young@example.com",
					BirthDate: timestamppb.New(time.Now().AddDate(-12, 0, 0)),
					Phone:     "(41) 99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: a data de nascimento deve estar no passado, o usuário deve ter pelo menos 13 anos e o ano deve ser entre 1900 e o ano atual",
		},
		{
			Name: "Invalid Phone - Missing Area Code",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.invalid@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "99999-9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o telefone ou celular deve estar no formato correto, ou seja, começar com '+' seguido de 1 a 3 dígitos para números internacionais, ou começar diretamente com um dígito para números brasileiros, e ter entre 9 e 14 dígitos no total, sem conter nenhum caractere que não seja dígito ou '+'",
		},
		{
			Name: "Invalid Phone - Wrong Format",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Silva",
					Email:     "joao.invalid@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "(41) 99999 9999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o telefone ou celular deve estar no formato correto, ou seja, começar com '+' seguido de 1 a 3 dígitos para números internacionais, ou começar diretamente com um dígito para números brasileiros, e ter entre 9 e 14 dígitos no total, sem conter nenhum caractere que não seja dígito ou '+'",
		},
		{
			Name: "Invalid Phone - Too Short - Brazilian Number",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Carlos",
					Email:     "joao.to.short@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "999-999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o telefone ou celular deve estar no formato correto, ou seja, começar com '+' seguido de 1 a 3 dígitos para números internacionais, ou começar diretamente com um dígito para números brasileiros, e ter entre 9 e 14 dígitos no total, sem conter nenhum caractere que não seja dígito ou '+'",
		},
		{
			Name: "Invalid Phone - Too Long - Brazilian Number",
			Request: &api.CreateUserRequest{
				PersonalInfo: &api.PersonalInfo{
					FirstName: "João",
					LastName:  "Carlos",
					Email:     "joao.to.long@example.com",
					BirthDate: timestamppb.New(time.Date(2000, 8, 10, 0, 0, 0, 0, time.UTC)),
					Phone:     "999999999999",
				},
				AccountInfo: &api.AccountInfo{
					Username:              "joao.valid",
					Password:              "ValidPassword123!",
					AccountStatus:         api.AccountStatus_ACTIVE,
					StatusReason:          "",
					CreatedAt:             timestamppb.Now(),
					UpdatedAt:             timestamppb.Now(),
					LastLogin:             timestamppb.Now(),
					FailedLoginAttempts:   0,
					LastFailedLogin:       timestamppb.Now(),
					LastFailedLoginReason: "",
					AccountLockedUntil:    timestamppb.Now(),
					AccountLockedReason:   "",
				},
			},
			WantErr:       true,
			ExpectedError: "Erro na validação do usuário: o telefone ou celular deve estar no formato correto, ou seja, começar com '+' seguido de 1 a 3 dígitos para números internacionais, ou começar diretamente com um dígito para números brasileiros, e ter entre 9 e 14 dígitos no total, sem conter nenhum caractere que não seja dígito ou '+'",
		},

		// Outros casos de teste para validação do usuário aqui
	}

	for _, tt := range testsCases {
		tt.RunTest(t)
	}
}
